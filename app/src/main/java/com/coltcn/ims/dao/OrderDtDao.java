package com.coltcn.ims.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.coltcn.ims.dao.OrderDt;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_DT".
*/
public class OrderDtDao extends AbstractDao<OrderDt, Long> {

    public static final String TABLENAME = "ORDER_DT";

    /**
     * Properties of entity OrderDt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Blid = new Property(1, Long.class, "blid", false, "BLID");
        public final static Property StockName = new Property(2, String.class, "stockName", false, "STOCK_NAME");
        public final static Property Quantity = new Property(3, Integer.class, "quantity", false, "QUANTITY");
        public final static Property Price = new Property(4, java.util.Date.class, "price", false, "PRICE");
    };

    private Query<OrderDt> order_StocksQuery;

    public OrderDtDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDtDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_DT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BLID\" INTEGER," + // 1: blid
                "\"STOCK_NAME\" TEXT," + // 2: stockName
                "\"QUANTITY\" INTEGER," + // 3: quantity
                "\"PRICE\" INTEGER);"); // 4: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_DT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderDt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long blid = entity.getBlid();
        if (blid != null) {
            stmt.bindLong(2, blid);
        }
 
        String stockName = entity.getStockName();
        if (stockName != null) {
            stmt.bindString(3, stockName);
        }
 
        Integer quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindLong(4, quantity);
        }
 
        java.util.Date price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(5, price.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderDt readEntity(Cursor cursor, int offset) {
        OrderDt entity = new OrderDt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // blid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stockName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // quantity
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // price
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderDt entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBlid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStockName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuantity(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderDt entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderDt entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "stocks" to-many relationship of Order. */
    public List<OrderDt> _queryOrder_Stocks(Long blid) {
        synchronized (this) {
            if (order_StocksQuery == null) {
                QueryBuilder<OrderDt> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Blid.eq(null));
                order_StocksQuery = queryBuilder.build();
            }
        }
        Query<OrderDt> query = order_StocksQuery.forCurrentThread();
        query.setParameter(0, blid);
        return query.list();
    }

}
